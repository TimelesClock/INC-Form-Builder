// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Form {
  id          BigInt       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  questions   Question[]
}

model Question {
  id          BigInt       @id @default(autoincrement())
  text        String
  type        QuestionType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  formId      BigInt
  answers     Answer[]
  form        Form      @relation(fields: [formId], references: [id])
}

enum QuestionType {
  SHORT_ANSWER
  PARAGRAPH
  MULTIPLE_CHOICE
  CHECKBOXES
  DROPDOWN
}
model Answer {
  id          BigInt       @id @default(autoincrement())
  content     String
  createdAt   DateTime  @default(now())
  questionId  BigInt
  question    Question  @relation(fields: [questionId], references: [id])

  @@index([questionId])
}


model FormTemplate {
  id            BigInt              @id @default(autoincrement())
  name          String
  description   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  templateQuestions TemplateQuestion[]
}

model TemplateQuestion {
  id            BigInt              @id @default(autoincrement())
  text          String
  type          QuestionType
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  formTemplateId BigInt
  formTemplate  FormTemplate     @relation(fields: [formTemplateId], references: [id])
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
